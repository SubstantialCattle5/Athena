generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model represents the application users
model User {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(100)
  age            Int
  birthday       DateTime
  location       String         @db.VarChar(255)
  gender         Gender
  email          String         @unique @db.VarChar(255)
  contact        String         @db.VarChar(20)
  picture        String         @db.VarChar(255)
  position       Position
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  blogs          Blog[]
  issuedTasks    Task[]         @relation("IssuedTasks")
  sleepData      SleepData[]
  surveys        Survey[]
  medicalQueries MedicalQuery[]
  answers        Answer[]
  Quiz           Quiz[]
  Task           Task?          @relation(fields: [taskId], references: [id])
  taskId         Int?

  @@index([email])
  @@index([name])
}

// Enum for gender
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Enum for user positions
enum Position {
  SUPERVISOR
  EMPLOYEE
  USER
}

// Blog model represents blog posts authored by users
model Blog {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  picture    String   @db.VarChar(255)
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorName String   @db.VarChar(100)
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?
  region     String   @default("general")

  @@index([userId])
  @@index([title])
}

// Task model represents tasks associated with users
model Task {
  id         Int        @id @default(autoincrement())
  date       DateTime
  taskName   String     @db.VarChar(255)
  status     TaskStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  issuedBy   User?      @relation(name: "IssuedTasks", fields: [issuedById], references: [id], onDelete: SetNull)
  issuedById Int?
  issuedTo   User[]

  @@index([issuedById])
}

// Enum for task status
enum TaskStatus {
  UPCOMING
  COMPLETED
  CANCELED
}

// SleepData model represents sleep data associated with users
model SleepData {
  id         Int       @id @default(autoincrement())
  date       DateTime
  sleepStart DateTime
  sleepEnd   DateTime
  sleepType  SleepType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?

  @@index([userId])
}

// Enum for sleep type
enum SleepType {
  TODAY
  WEEKLY
  MONTHLY
}

// Survey model represents surveys created by users
model Survey {
  id          Int        @id @default(autoincrement())
  topic       String     @default("question") @db.VarChar(255)
  description String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  questions   Question[]

  @@index([userId])
  @@index([topic])
}

model Quiz {
  id        Int        @id @default(autoincrement())
  topic     String     @default("periods") @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id])

  @@index([topic])
}

// Question model represents questions in surveys
model Question {
  id            Int          @id @default(autoincrement())
  text          String       @db.Text
  type          QuestionType
  correctAnswer String       @db.Text
  options       String[]     @default([""])
  answers       Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  survey   Survey? @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId Int?

  Quiz   Quiz? @relation(fields: [quizId], references: [id])
  quizId Int?

  @@index([surveyId])
}

// Enum for question types
enum QuestionType {
  MULTIPLE_CHOICE
  OPEN_ENDED
  BOOLEAN
}

// Answer model represents answers to survey questions
model Answer {
  id         Int       @id @default(autoincrement())
  response   String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int?

  @@index([userId])
  @@index([questionId])
}

// MedicalQuery model represents medical queries made by users
model MedicalQuery {
  id        Int         @id @default(autoincrement())
  query     String      @db.Text
  response  String      @db.Text
  status    QueryStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?

  @@index([userId])
}

// Enum for query status
enum QueryStatus {
  PENDING
  RESPONDED
  CLOSED
}
